// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).


// The ExtendAlu chip is an extension of the standard ALU which also supports
// shift operations.
// The inputs of the extended ALU are instruction[9], x[16], y[16].
// The "ng" and "zr" output pins behave the same as in the regular ALU.
// The "out" output is defined as follows:
// If instruction[8]=1 and instruction[7]=1 the output is identical to the 
// regular ALU, where:
// instruction[5]=zx, instruction[4]=nx, ..., instruction[0]=no
// Else, if instruction[8]=0 and instruction[7]=1, the output is a shift:
// - If instruction[4] == 0, the input "y" will be shifted, otherwise "x".
// - If instruction[5] == 0, the shift will be a right-shift, otherwise left.
// - All other inputs are undefined.

CHIP ExtendAlu {
     IN x[16], y[16], instruction[9];
     OUT out[16], zr, ng;
     
     PARTS:
     // Put your code here:
	 And(a=instruction[8], b=instruction[7], out=isRegularALU);
	 
	 //Shifts
	 ShiftLeft(in=y,out=yLeftShift);
     ShiftRight(in=y,out=yRightShift);

     ShiftLeft(in=x,out=xLeftShift);
     ShiftRight(in=x,out=xRightShift);

     Mux16(a=yRightShift, b=yLeftShift, sel=instruction[5], out=yShifted);
     Mux16(a=xRightShift, b=xLeftShift, sel=instruction[5], out=xShifted);
	
	 Mux(a=false, b=instruction[5], sel=isRegularALU, out=zx);
     Mux(a=false, b=instruction[4], sel=isRegularALU, out=nx);
     Mux(a=false, b=instruction[3], sel=isRegularALU, out=zy);
     Mux(a=false, b=instruction[2], sel=isRegularALU, out=ny);
     Mux(a=true, b=instruction[1], sel=isRegularALU, out=f);
     Mux(a=false, b=instruction[0], sel=isRegularALU, out=no);
	 
	 Mux16(a=yShifted, b=xShifted, sel=instruction[4], out=xComputedTemp);
	 Mux16(a=xComputedTemp, b=x, sel=isRegularALU, out=xComputed);
	 Mux16(a=false, b=y, sel=isRegularALU, out=yComputed);

     ALU(x=xComputed, y=yComputed, zx=zx, nx=nx, zy=zy, ny=ny, f=f, no=no, out=out, zr=zr, ng=ng);
	 
	
	 

}
