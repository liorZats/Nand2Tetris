// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
	
	Mux16(a=instruction, b=outPrevALU, sel=instruction[15], out=Ain);
	// open register A if A instruction or C instruction with instruction[5] (an opcode)
	Not(in=instruction[15], out=NotAorCBit);
	And(a=instruction[5], b=instruction[15], out=InstructC);
	Or(a=InstructC, b=NotAorCBit, out=LoadRegA);
	ARegister(in=Ain, load=LoadRegA, out[0..14]=addressM, out[15]=dump1, out=outRegA);
	And(a=instruction[4], b=instruction[15], out=LoadRegD);
	DRegister(in=outPrevALU, load=LoadRegD, out=inx);
	//writeM?
	And(a=instruction[15], b=instruction[3], out=writeM);
	//C instruction and is M used
	And(a=instruction[12], b=instruction[15], out=ySel);
	Mux16(a=outRegA, b=inM, sel=ySel, out=iny);
	
	ALU(x=inx, y=iny, zx=instruction[11], nx=instruction[10], zy=instruction[9],
	ny=instruction[8], f=instruction[7], no=instruction[6], zr=ozr, ng=ong, out=outM, out=outPrevALU);
	
	//JEQ, JNE
	Not(in=ozr, out=nozr);
	//JGE, JLE
	Not(in=ong, out=nong);
	Or(a=ong, b=ozr, out = JLE);
	//JLT, JGT
	And(a=nozr, b=nong, out=JGT);
	And(a=nozr, b=ong, out=JLT);
	//PC handle
	Mux8Way(a=false, b=JGT, c=ozr, d=nong, e=JLT, f=nozr, g=JLE, h=true, sel=instruction[0..2], out=ConditionLoadPC);
	And(a=ConditionLoadPC, b=instruction[15], out=loadPC);
	
	Not(in=loadPC, out=NotLoadPC);
	PC(in=outRegA, load=loadPC, inc=NotLoadPC, reset=reset, out[0..14]=pc, out[15]=dump);	
}