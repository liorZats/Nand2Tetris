// This file is part of nand2tetris, as taught in The Hebrew University, and
// was written by Aviv Yaish. It is an extension to the specifications given
// [here](https://www.nand2tetris.org) (Shimon Schocken and Noam Nisan, 2017),
// as allowed by the Creative Common Attribution-NonCommercial-ShareAlike 3.0
// Unported [License](https://creativecommons.org/licenses/by-nc-sa/3.0/).

// This chip is an extension of the regular CPU that uses the extended ALU.
// If instruction[15]==0 or (instruction[14]==1 and instruction[13]==1),
// then CpuMul behaves exactly the same as the regular CPU.
// If instruction[15]==1 and instruction[14]==0 the chip will behave as follows:
// | Instruction           | 15 | 14 | 13 | a | c1 | c2 | c3 | c4 | c5 | c6 |
// |-----------------------|:--:|:--:|:--:|:-:|:--:|:--:|:--:|:--:|:--:|:--:|
// | Regular a-instruction |  0 |  * |  * | * |  * |  * |  * |  * |  * |  * |
// | Regular c-instruction |  1 |  1 |  1 | * |  * |  * |  * |  * |  * |  * |
// | dest=A<<;jump         |  1 |  0 |  1 | 0 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=D<<;jump         |  1 |  0 |  1 | 0 |  1 |  1 |  0 |  0 |  0 |  0 |
// | dest=M<<;jump         |  1 |  0 |  1 | 1 |  1 |  0 |  0 |  0 |  0 |  0 |
// | dest=A>>;jump         |  1 |  0 |  1 | 0 |  0 |  0 |  0 |  0 |  0 |  0 |
// | dest=D>>;jump         |  1 |  0 |  1 | 0 |  0 |  1 |  0 |  0 |  0 |  0 |
// | dest=M>>;jump         |  1 |  0 |  1 | 1 |  0 |  0 |  0 |  0 |  0 |  0 |
// Where:
// - "<<" is a left shift, and ">>" is a right shift, as defined in project 2.
//   These notations were chosen because they are used in real programming
//   languages.
// - dest and jump can take the same values as in the regular CPU.

CHIP CpuMul {
    IN  
        inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset=1) or continue executing
                         // the current program (reset=0).
    OUT 
        outM[16],        // M value output
        writeM,          // Write into M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction
    
    PARTS:
    // Put your code here:
	Mux16(a=instruction, b=outPrevALU, sel=instruction[15], out=Ain);
	// open register A if A instruction or C instruction with instruction[5] (an opcode)
	Not(in=instruction[15], out=NotAorCBit);
	And(a=instruction[5], b=instruction[15], out=InstructC);
	Or(a=InstructC, b=NotAorCBit, out=LoadRegA);
	ARegister(in=Ain, load=LoadRegA, out[0..14]=addressM, out[15]=dump1, out=outRegA);
	And(a=instruction[4], b=instruction[15], out=LoadRegD);
	DRegister(in=outPrevALU, load=LoadRegD, out=inx);
	//writeM?
	And(a=instruction[15], b=instruction[3], out=writeM);
	//C instruction and is M used
	And(a=instruction[12], b=instruction[15], out=ySel);
	Mux16(a=outRegA, b=inM, sel=ySel, out=iny);
	ExtendAlu(x=inx, y=iny, instruction=instruction[6..14], zr=ozr, ng=ong, out=outM, out=outPrevALU);
	
	//JEQ, JNE
	Not(in=ozr, out=nozr);
	//JGE, JLE
	Not(in=ong, out=nong);
	Or(a=ong, b=ozr, out = JLE);
	//JLT, JGT
	And(a=nozr, b=nong, out=JGT);
	And(a=nozr, b=ong, out=JLT);
	//PC handle
	Mux8Way(a=false, b=JGT, c=ozr, d=nong, e=JLT, f=nozr, g=JLE, h=true, sel=instruction[0..2], out=ConditionLoadPC);
	And(a=ConditionLoadPC, b=instruction[15], out=loadPC);
	
	Not(in=loadPC, out=NotLoadPC);
	PC(in=outRegA, load=loadPC, inc=NotLoadPC, reset=reset, out[0..14]=pc, out[15]=dump);	}
